

On 7/23/20, Sam Tobin-Hochstadt <samth@cs.indiana.edu> wrote:
> I have a few questions.
> 
> 1. Why are things so slow? In particular, what could possibly be
> happening in snake that is 22x overhead?

12779 on transient branch
10925 with (f x) opts

thats not much! what else is going on?

TODO


> 2. I don't understand your remark about `(f x)`.

Thanks for asking, I hope you have ideas about how to improve the current state.


From the beginning: the normal transient rule is that `(f x)` gets rewritten to
`(check S (f x))` because we can't trust `f`, it might be untyped.

My idea was to trust `f` if it's an identifier that was defined in the current
module, or another transient module.

Let's stick with the current-module case. If the file says `(define (f a) e)`
then soundness says that `e` has the right shape, so we can trust calls `(f x)`
have the right shape too.

But this program shows an `f` that we can't trust, because it gets its type
from a nonsense require/typed predicate.

```
  #lang typed/racket #:transient ;; typed-racket-test/fail/pr10350.rkt

  (require/typed scheme/base
   [values (All (T) ((Any -> Boolean) -> (Any -> Boolean : T)))])

  (: number->string? (Any -> Boolean : (Number -> String)))
  (define (number->string? x)
    (((inst values (Number -> String)) procedure?) x))

  (: f (Number -> String))
  (define f
    (if (number->string? +) + number->string))

  (ann (f 3) String)
```

Simpler programs have the same issue, like `(define f (vector-ref v 0))` where
the vector of functions came from `require/typed`.

If we had a way to tell apart "identifiers bound to literal lambdas" then we
could do better; this would help `snake` by ~2x (on my laptop).


> 3. Have you tried things on Racket CS?

All the numbers are from CS. I have not tried BC.


> 4. Have you replicated the numbers that Vitousek et al got for their
> (smaller) benchmarks? Particularly on the blame side, since the larger
> benchmarks get worse numbers, it seems important to check that.

I know their blame is also slow.

Just now I ran their `chaos` 'go` and `spectralnorm` and see roughly-similar
overhead between Retic fully-typed and Retic with blame (3x, 2x, 1.5x).

But I also converted our TR sieve program to Retic. I had trouble with the
stack limit at first. After that, adding blame took the program up from 40s
to a timeout after 10min (I killed it).

(Hope this answers the question --- I'm not sure why you asked about smaller
benchmarks.)



- - -

snake untyped 719
snake 10101111 normal 12779 (17.8x)
snake 10101111 unsafe 10925 (15.2x)


- - -


chaos transient
1.6675470000000001
1.67934
1.6625699999999999
1.6599590000000002
1.6580850000000003
1.6649479999999999

chaos mgd-transient
5.175612
5.195894
5.054855
5.187823
5.075536
5.193404999999999


go transient
10.767317000000002
10.329541
10.320514000000001
10.402410999999999
10.016009999999998
10.104163999999999

go blame
21.230272
21.51616
20.903669
21.364932
22.077095
21.48814

spectralnorm transient
2.284129
2.32398
2.611606
2.400873
2.422697
2.329733

spectralnorm mgd-transient
3.01538
3.038865
3.0241269999999996
3.180621
2.962125
2.975569

