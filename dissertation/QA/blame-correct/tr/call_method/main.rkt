#lang typed/racket/base #:transient
(require typed/racket/class)

(define-type Foo%
  (Class
    (foo (-> Integer Integer Integer Integer Void))
    (bar (-> Integer Integer Integer Void))
    (baz (-> Integer Integer Void))
    (quux (-> Integer Void))
    (qux (-> Void))))

(define-type Foo (Instance Foo%))

(define foo% : Foo%
  (class object%
    (super-new)

    (define/public (foo a b c d)
      (send this bar a b c)
      (send this bar a b c)
      (send this bar a b c)
      (send this bar a b c)
      (send this bar a b c)
      (send this bar a b c)
      (send this bar a b c)
      (send this bar a b c)
      (send this bar a b c)
      (send this bar a b c)
      (send this bar a b c)
      (send this bar a b c)
      (send this bar a b c)
      (send this bar a b c)
      (send this bar a b c)
      (send this bar a b c)
      (send this bar a b c)
      (send this bar a b c)
      (send this bar a b c)
      (send this bar a b c))

    (define/public (bar a b c)
      (send this baz a b)
      (send this baz a b)
      (send this baz a b)
      (send this baz a b)
      (send this baz a b)
      (send this baz a b)
      (send this baz a b)
      (send this baz a b)
      (send this baz a b)
      (send this baz a b)
      (send this baz a b)
      (send this baz a b)
      (send this baz a b)
      (send this baz a b)
      (send this baz a b)
      (send this baz a b)
      (send this baz a b)
      (send this baz a b)
      (send this baz a b)
      (send this baz a b))

    (define/public (baz a b)
      (send this quux a)
      (send this quux a)
      (send this quux a)
      (send this quux a)
      (send this quux a)
      (send this quux a)
      (send this quux a)
      (send this quux a)
      (send this quux a)
      (send this quux a)
      (send this quux a)
      (send this quux a)
      (send this quux a)
      (send this quux a)
      (send this quux a)
      (send this quux a)
      (send this quux a)
      (send this quux a)
      (send this quux a)
      (send this quux a))

    (define/public (quux a)
      (send this qux)
      (send this qux)
      (send this qux)
      (send this qux)
      (send this qux)
      (send this qux)
      (send this qux)
      (send this qux)
      (send this qux)
      (send this qux)
      (send this qux)
      (send this qux)
      (send this qux)
      (send this qux)
      (send this qux)
      (send this qux)
      (send this qux)
      (send this qux)
      (send this qux)
      (send this qux))

    (define/public (qux)
      (void))))

(: test_calls (-> Void))
(define (test_calls)
  (define f : Foo (make-object foo%))
  (send f foo 1 2 3 4)
  (send f foo 1 2 3 4)
  (send f foo 1 2 3 4)
  (send f foo 1 2 3 4)
  (send f foo 1 2 3 4)
  (send f foo 1 2 3 4)
  (send f foo 1 2 3 4)
  (send f foo 1 2 3 4)
  (send f foo 1 2 3 4)
  (send f foo 1 2 3 4)
  (send f foo 1 2 3 4)
  (send f foo 1 2 3 4)
  (send f foo 1 2 3 4)
  (send f foo 1 2 3 4)
  (send f foo 1 2 3 4)
  (send f foo 1 2 3 4)
  (send f foo 1 2 3 4)
  (send f foo 1 2 3 4)
  (send f foo 1 2 3 4)
  (send f foo 1 2 3 4)
  (void))

(time (test_calls))

