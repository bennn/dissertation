#lang typed/racket/base #:transient

(: foo (-> Integer Integer Integer Integer Void))
(define (foo a b c d)
    (bar a b c)
    (bar a b c)
    (bar a b c)
    (bar a b c)
    (bar a b c)
    (bar a b c)
    (bar a b c)
    (bar a b c)
    (bar a b c)
    (bar a b c)
    (bar a b c)
    (bar a b c)
    (bar a b c)
    (bar a b c)
    (bar a b c)
    (bar a b c)
    (bar a b c)
    (bar a b c)
    (bar a b c)
    (bar a b c))

(: bar (-> Integer Integer Integer Void))
(define (bar a b c)
    (baz a b)
    (baz a b)
    (baz a b)
    (baz a b)
    (baz a b)
    (baz a b)
    (baz a b)
    (baz a b)
    (baz a b)
    (baz a b)
    (baz a b)
    (baz a b)
    (baz a b)
    (baz a b)
    (baz a b)
    (baz a b)
    (baz a b)
    (baz a b)
    (baz a b)
    (baz a b))

(: baz (-> Integer Integer Void))
(define (baz a b)
    (quux a)
    (quux a)
    (quux a)
    (quux a)
    (quux a)
    (quux a)
    (quux a)
    (quux a)
    (quux a)
    (quux a)
    (quux a)
    (quux a)
    (quux a)
    (quux a)
    (quux a)
    (quux a)
    (quux a)
    (quux a)
    (quux a)
    (quux a))

(: quux (-> Integer Void))
(define (quux a)
    (qux)
    (qux)
    (qux)
    (qux)
    (qux)
    (qux)
    (qux)
    (qux)
    (qux)
    (qux)
    (qux)
    (qux)
    (qux)
    (qux)
    (qux)
    (qux)
    (qux)
    (qux)
    (qux)
    (qux))

(: qux (-> Void))
(define (qux)
    (void))

(: test_calls (-> Void))
(define (test_calls)
    (foo 1 2 3 4)
    (foo 1 2 3 4)
    (foo 1 2 3 4)
    (foo 1 2 3 4)
    (foo 1 2 3 4)
    (foo 1 2 3 4)
    (foo 1 2 3 4)
    (foo 1 2 3 4)
    (foo 1 2 3 4)
    (foo 1 2 3 4)
    (foo 1 2 3 4)
    (foo 1 2 3 4)
    (foo 1 2 3 4)
    (foo 1 2 3 4)
    (foo 1 2 3 4)
    (foo 1 2 3 4)
    (foo 1 2 3 4)
    (foo 1 2 3 4)
    (foo 1 2 3 4)
    (foo 1 2 3 4)
    (void))

(time (test_calls))

