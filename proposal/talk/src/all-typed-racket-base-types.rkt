Any 'a boolean?]
Async-ChannelTop (make-async-channel) #f]
Async-Channelof (Async-Channelof Any) (make-async-channel) #f]
Boolean #f not]
BoxTop (box 5) boolean?]
Boxof (Boxof Integer) (box 3) (lambda (v) (add1 (unbox v)))]
Byte 0 add1]
Byte-PRegexp (byte-pregexp #"\\d\\d") (lambda (p) (regexp-match? p "013a"))]
Byte-Regexp (byte-regexp #"hi$") (lambda (p) (regexp-match? p "hi"))]
Bytes #"hello" bytes-length]
Bytes-Converter (or (bytes-open-converter "UTF-8" "UTF-8") (error 'pr241 "Failed to make bytes converter")) bytes-close-converter]
ChannelTop (make-channel) channel-try-get]
Channelof (Channelof Integer) (make-channel) channel-try-get]
Char #\space char->integer]
ClassTop object% #f]
Compiled-Expression (compile-syntax #'#t) #f]
Compiled-Module-Expression . #f)
Complex 0 add1]
Continuation-Mark-KeyTop (make-continuation-mark-key) #f]
Continuation-Mark-Keyof (Continuation-Mark-Keyof Any) (make-continuation-mark-key 'X) #f]
Continuation-Mark-Set (current-continuation-marks) #f]
Custodian (current-custodian) #f]
Custodian-Boxof (Custodian-Boxof Integer) (make-custodian-box (current-custodian) 1) #f]
Datum 'A (lambda (x) (datum->syntax #f x))]
EOF eof eof-object?]
Environment-Variables (current-environment-variables) environment-variables-names]
Ephemeronof (Ephemeronof Integer) (make-ephemeron 'key 4) #f]
Evtof (Evtof String) never-evt choice-evt]
Exact-Complex'
Exact-Imaginary'
Exact-Nonnegative-Integer 0 add1]
Exact-Number 0 add1]
Exact-Positive-Integer 6 add1]
Exact-Rational 1/3 add1]
ExtFlVector (extflvector pi.t) extflvector-length])
ExtFlonum pi.t extflround])
ExtFlonum-Nan +nan.t (lambda (n) (extfl= n n))])
ExtFlonum-Negative-Zero -0.0t0 extflround])
ExtFlonum-Positive-Zero +0.0t0 extflround])
ExtFlonum-Zero 0.0t0 extflround])
FSemaphore (make-fsemaphore 0) fsemaphore-post]
False #f not]
Fixnum 9 add1]
FlVector (flvector 1.14 2.14 3.14) flvector-length]
Float 1.0 add1]
Float-Complex 1.0+1i add1]
Float-Nan +nan.0 add1]
Float-Negative-Zero -0.0 add1]
Float-Positive-Zero 0.0 add1]
Float-Zero 0.0 add1]
Flonum 1.0 add1]
Flonum-Nan +nan.0 add1]
Flonum-Negative-Zero -0.0 add1]
Flonum-Positive-Zero 0.0 add1]
Flonum-Zero 0.0 add1]
Futureof (Futureof Integer) (future (lambda () 4)) #f]
FxVector (fxvector 1) fxvector-length]
HashTable (HashTable Symbol String) (hash) (lambda (h) (hash-ref h 'a #f))]
HashTableTop (hash) (lambda (h) (hash-ref h 'a #f))]
Identifier (syntax exit) #f]
Imaginary'
Immutable-HashTable (Immutable-HashTable Symbol String) (hash) (lambda (h) (hash-set h 'a "a"))]
Immutable-Vector (Immutable-Vector Integer) (vector-immutable 1) (lambda (v) (vector-ref v 0))]
Immutable-Vectorof (Immutable-Vectorof Integer) (vector-immutable 1) (lambda (v) (vector-ref v 0))]
Impersonator-Property (let-values ([(i i? i-val) (make-impersonator-property 'i)]) i) (lambda (i) (impersonate-procedure (lambda () (void)) #f i 2))]
Index 3 add1]
Inexact-Complex (let ([n (exact->inexact 1/3+1/3i)]) (if (not (real? n)) n (error 'pr241 "Failed to make Inexact-Complex"))) zero?]
Inexact-Imaginary'
Inexact-Real (exact->inexact 1/3) add1]
Inexact-Real-Nan +nan.0 zero?]
Inexact-Real-Negative-Zero -0.0 add1]
Inexact-Real-Positive-Zero 0.0 add1]
Inexact-Real-Zero 0.0 add1]
Input-Port (current-input-port) port?]
Inspector (current-inspector) (lambda (i) (parameterize ([current-inspector i]) (void)))]
Integer 0 add1]
Internal-Definition-Context (syntax-local-make-definition-context) #f]
Keyword (string->keyword "hi") keyword->string]
Listof (Listof Integer) (list 1) (lambda (xs) (add1 (car xs)))]
Log-Level 'info symbol->string]
Log-Receiver (make-log-receiver (current-logger) 'info) choice-evt]
Logger (current-logger) (lambda (l) (log-level? l 'info))]
MListof (MListof Integer) (mcons 4 '()) #f]
MPairTop (mcons 1 1) #f]
MPairof (MPairof Integer String) (mcons 4 "ad") #f]
Module-Path "hello.rkt" module-path?]
Module-Path-Index . #f)
Mutable-HashTable (Mutable-HashTable Symbol String) (make-hash) (lambda (h) (hash-ref h 'a #f) (with-handlers ([exn:fail:contract? void]) (hash-set! h 'a "a") (error 'pr241 "mutable hashtable ~a incorrectly allowed to be set!" h)))]
Mutable-HashTableTop (make-hash) (lambda (h) (hash-ref h 'a #f))]
Mutable-Vector (Mutable-Vector Integer) (vector 1) (lambda (v) (vector-ref v 0) (with-handlers ([exn:fail:contract? void]) (vector-set! v 0 1) (error 'pr241 "mutable vector ~a incorrectly allowed to be set!" v)))]
Mutable-VectorTop (vector 1 2 3) (lambda (x) (vector-ref x 0))]
Mutable-Vectorof (Mutable-Vectorof Integer) (vector 1) (lambda (v) (vector-ref v 0) (with-handlers ([exn:fail:contract? void]) (vector-set! v 0 1) (error 'pr241 "mutable vectorof ~a incorrectly allowed to be set!" v)))]
Namespace (make-empty-namespace) #f]
Namespace-Anchor . #f)
Natural 62 add1]
Negative-Exact-Rational -3/2 add1]
Negative-ExtFlonum (->extfl -1) extflround])
Negative-Fixnum -3 add1]
Negative-Float -1.0 add1]
Negative-Flonum -1.0 add1]
Negative-Inexact-Real ,(->fl -1.0f0) add1]
Negative-Integer -2 add1]
Negative-Real -1 add1]
Negative-Single-Flonum ,(->fl -1.0f0) add1])
Nonnegative-Exact-Rational 1 add1]
Nonnegative-ExtFlonum (->extfl 1) extflround])
Nonnegative-Fixnum 4 add1]
Nonnegative-Float 1.0 add1]
Nonnegative-Flonum 1.0 add1]
Nonnegative-Inexact-Real (exact->inexact 1/3) add1]
Nonnegative-Integer 0 add1]
Nonnegative-Real 0 add1]
Nonnegative-Single-Flonum ,(->fl 1.0f0) add1])
Nonpositive-Exact-Rational 0/1 add1]
Nonpositive-ExtFlonum (->extfl -1) extflround])
Nonpositive-Fixnum -4 add1]
Nonpositive-Float -1.0 add1]
Nonpositive-Flonum -1.0 add1]
Nonpositive-Inexact-Real (- (exact->inexact 1/3)) add1]
Nonpositive-Integer 0 add1]
Nonpositive-Real 0 add1]
Nonpositive-Single-Flonum ,(->fl -1.0f0) add1])
Nothing . #f)
Null '() length]
Number 0 add1]
One  1 add1]
Option (Option Integer) 1 add1]
Output-Port (current-output-port) port?]
PRegexp #px"\\d\\d" (lambda (p) (regexp-match? p "013a"))]
Pair (Pair Integer Boolean) (cons 1 #t) (lambda (v) (add1 (car v)))]
Pairof (Pairof Integer Boolean) (cons 1 #f) (lambda (v) (add1 (car v)))]
Parameterization (current-parameterization) #f]
Path (current-directory) path->string]
Path-For-Some-System (current-directory) path->string]
Path-String "foo/bar" relative-path?]
Place (place hi (void)) place-kill]
Place-Channel (let-values ([(p1 p2) (place-channel)]) p1) choice-evt]
Port (current-input-port) port?]
Positive-Byte 1 add1]
Positive-Exact-Rational 4/3 add1]
Positive-ExtFlonum (->extfl 1) extflround])
Positive-Fixnum 2 add1]
Positive-Float 1.0 add1]
Positive-Flonum 1.0 add1]
Positive-Index 3 add1]
Positive-Inexact-Real ,(->fl 1.0f0) add1]
Positive-Integer 6 add1]
Positive-Real 1 add1]
Positive-Single-Flonum ,(->fl +1.0f0) add1])
Pretty-Print-Style-Table (pretty-print-current-style-table) (lambda (x) (pretty-print-extend-style-table x '() '()))]
Procedure (lambda (x) x) (lambda (f) (procedure-arity-includes? f 1))]
Promise (Promise Integer) (delay 3) force]
Prompt-TagTop (make-continuation-prompt-tag) #f]
Prompt-Tagof (Prompt-Tagof Any Any) (make-continuation-prompt-tag) #f]
Pseudo-Random-Generator (current-pseudo-random-generator) pseudo-random-generator->vector]
Read-Table (or (current-readtable) (error 'noo)) #f]
Real 0 add1]
Real-Zero 0 add1]
Regexp #rx"hi$" (lambda (p) (regexp-match? p "hi"))]
Resolved-Module-Path (make-resolved-module-path (current-directory)) resolved-module-path-name]
Security-Guard (current-security-guard) #f]
Semaphore (make-semaphore) semaphore-post]
SequenceTop'
Sequenceof (Sequenceof Natural) '(1 2 3) sequence->list]
Setof (Setof Integer) (set) set-empty?]
Sexp (syntax->datum (syntax 'foo)) (lambda (x) x)]
Sexpof (Sexpof Integer) (syntax->datum #'(1 2 3)) (lambda (xs) (add1 (car xs)))]
Single-Flonum ,(->fl 1.0f0) add1])
Single-Flonum-Complex ,(make-rectangular (->fl 1f0) (->fl 1f0)) add1])
Single-Flonum-Nan ,(->fl +nan.f) add1])
Single-Flonum-Negative-Zero ,(->fl -0f0) add1])
Single-Flonum-Positive-Zero ,(->fl 0f0) add1])
Single-Flonum-Zero ,(->fl 0f0) add1])
Special-Comment (make-special-comment 'hi) #f]
String "yolo" string->symbol]
Struct-Property'
Struct-Type-Property (let-values ([(n g s) (make-struct-type-property 'foo)]) n) #f]
Struct-TypeTop . #f)
Subprocess (let*-values ([(sp _out _in _err) (subprocess #f #f #f ".")]) (close-output-port _in) (close-input-port _out) (close-input-port _err) sp) choice-evt]
Symbol 'a symbol->string]
Syntax (syntax 'B) #f]
Syntax-E (syntax-e (syntax 'A)) #f]
Syntaxof (Syntaxof Integer) #'1 #f]
TCP-Listener (tcp-listen 0) choice-evt]
Thread (thread (lambda () (void))) choice-evt]
Thread-CellTop (make-thread-cell 'X) #f]
Thread-Cellof (Thread-Cellof Integer) (make-thread-cell 1) #f]
Thread-Group (current-thread-group) make-thread-group]
True #t not]
UDP-Socket (udp-open-socket) udp-close]
Undefined . #f)
UnitTop (unit (import) (export)) #f]
Variable-Reference (let ([x 4]) (#%variable-reference x)) #f]
Vector (Vector Integer) (vector 1) (lambda (v) (vector-ref v 0))]
VectorTop (vector 1 2 3) (lambda (x) (vector-ref x 0))]
Vectorof (Vectorof Integer) (vector 0) (lambda (v) (add1 (vector-ref v 0)))]
Void (void) void?]
Weak-BoxTop (make-weak-box 3) #f]
Weak-Boxof (Weak-Boxof Integer) (make-weak-box 1) #f]
Weak-HashTable (Weak-HashTable Symbol String) (make-weak-hash) (lambda (h) (hash-ref h 'a #f) (with-handlers ([exn:fail:contract? void]) (hash-set! h 'a "a") (error 'pr241 "weak hashtable ~a incorrectly allowed to be set!" h)))]
Weak-HashTableTop (make-weak-hash) (lambda (h) (hash-ref h 'a #f))]
Will-Executor (make-will-executor) choice-evt]
Zero 0 add1]
